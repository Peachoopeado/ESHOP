Порядок действий в ходе работы с проектом Django

1. Установить Django
2. Создать проект Django с помощью команды "django-admin startproject <название проекта>"
3. Создать приложение с помощью команды "python manage.py startapp <название приложения>"
4. Указать в файле settings.py созданное приложение в поле INSTALLED_APPLICATIONS (Зарегистрировать приложение)
5. Указать отслеживаемые url-адреса в папке проекта (не приложения), импортировать include
6. Создать файл urls.py в приложении импортировать path, include, views
7. Создать методы, которые осуществляют вывод страницы на экран в файле views
8. Создать папку templates (В приложении)
9. Внутри templates создать папку с названием самого приложения, т.к. шаблонов может быть множество
10. Создать папку static (В приложении)
11. Внутри static создать папку с названием самого приложения + (css, js, img)


jinja:
{% load static %} - подключить статические файлы
{% extends '<название папки шаблонов приложения>/layout.html'%}
{% url 'название страницы'%} - передать ссылку на страницу



Создание нового приложения

1. python manage.py startapp <название приложения>
2. зарегистрировать новое приложение
3. добавляем новый обработчик событий в urls проекта


Работа с базой данных

1. Создать класс в models. Этот класс представляет собой модель, а модель - это таблица в базе данных
2. Прописать поля
3. Создать файл миграции - синхронизацию проекта с базой данных - python manage.py makemigrations
4. Выполнить миграцию - python manage.py migrate

Работа с панелью администратора
1. Зарегистрировать пользователя - python manage.py createsuperuser
2. Зарегистрировать нужные модели в admin.py (в приложении)
3. Чтобы название модели не каверкалось, в models.py создать класс Meta с переменной verbose_name

Вывод записей из базы данных

1. В views.py импортировать класс из models
2. В views.py внутри метода создать переменную, которой присваивается объект класса
3. Передать переменную в ключе в качестве параметра метода render
p.s. данные можно сортировать (object.order_by())
- Для среза указываем [:<кол-во нужных записей>]



Форма для добавления записей в БД
1. Создать форму (html или с помощью django) (не забывать проводить миграции для моделей разных приложений)
2. Указать внутри формы csrf-токен {% csrf_token %}
3. Создать файл forms.py в приложении
4. Создать объект класса формы в forms.py
5. Передать форму в views.py в тому шаблону, где будет находиться форма
6. В шаблоне указать расположение формы с помощью {{ form (название переменной, куда была помещена форма) }}
7. Создать виджеты в forms.py (widgets)
8. Настроить обработку данных в методе шаблона
9. После отправки формы можно настроить переадресацию с помощью метода redirect

Распространить форму по всем страницам
Сделать плейсхолдер для направлений
разобраться с маской ввода

Работа с динамическими страницами
1. Импортировать DetailView из django.views.generic в файл views
2. Создать класс с полями model, temlate_name, context_object_name (так же во views)
3. В url.py приложения указать ссылку на динамический параметр и обращаемся к КЛАССУ из views.py (приложения).
После класса указываем метод as_view()
4. В заголовке нам необходимо указать свойство поля context_object_name


Чтобы добавить текстовый редактор, необходимо следовать инструкции по установке django-summernote

Добавление формы в DetailView
1. В views приложения Импортировать следующее:
    1) django.shortcuts.redirect
    2) django.urls.reverse
    3) django.views.generic.edit.FromMixin
2. В качестве параметра класса DetailView добавить FormMixin

3. Добавить поле form_class
4. Прописать метод get_success_url
5. Прописать метод get_context_data
6. Прописать метод post
7. Прописать метод form_valid


